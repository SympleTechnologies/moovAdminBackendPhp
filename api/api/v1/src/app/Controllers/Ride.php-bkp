<?php
namespace src\app\Controllers;

use src\app\Helpers\HWallet;
use src\app\Models\DriverDetails;
use src\app\Models\Rides;
use src\app\Models\Trips;
use src\config\Api_Controller;

class Ride extends Api_Controller
{
    //pending accept ride

    public function driver_shift()
    {
        $types = array("online", "offline");

        $status = $this->input['status'];
        $userid = $this->input['userid'];
        $lat = $this->input['lat'];
        $long = $this->input['long'];

        $time = time_now();
        $date = date('Y-m-d', strtotime($time));
        $ctime = date('H:i:s', strtotime($time));

        if (in_array($status, $types)) {

            $dd = DriverDetails::find($userid);
            $dd->dd_curent_status = $status;
            $dd->dd_last_status = $status;
            $dd->dd_status_date = $date;
            $dd->dd_status_time = $ctime;
            $dd->dd_current_lat = $lat;
            $dd->dd_current_long = $long;
            $dd->save();

            $this->db->table('driver_shift')->insert([
                'ds_status' => $status,
                'ds_driver_id' => $userid,
                'ds_time' => $time,
                'ds_lat' => $lat,
                'ds_long' => $long,
            ]);

            $output = array(
                "status" => true,
                "message" => "Updated Successfully", //
            );

        } else {

            $output = array(
                "status" => false,
                "message" => "Please choose a valid parameter",
            );
        }
        return $this->response->withJson($output);
    }

    public function update_location()
    {

        $userid = $this->input['userid'];
        $lat = $this->input['lat'];
        $long = $this->input['long'];
        $tripid = $this->input['tripid'];

        $status = DriverDetails::where('dd_driver_id', $userid)->update(['dd_current_lat' => $lat, 'dd_current_long' => $long]);

        if ($status) {
            $output = array(
                "status" => true,
                "message" => "Updated Successfully", //
            );
        } else {
            $output = array(
                "status" => false,
                "message" => "An error occured", //
            );

        }
        return $this->response->withJson($output);

    }

    public function add_rating()
    {

        $id = $this->db->table('driver_ratings')->insertGetId([
            "dr_driver_id" => $this->input['driver_id'],
            "dr_trip_id" => $this->input['trip_id'],
            "dr_user_id" => $this->input['user_id'],
            "dr_rating_score" => $this->input['rating_score'],
            "dr_review" => $this->input['review'],

        ]);
        if (empty($id)) {
            $output = array(
                "status" => false,
                "message" => "An error occured, please tr again",
            );
        } else {
            $output = array(
                "status" => true,
                "message" => "Rating added successfully",
            );

        }
        return $this->response->withJson($output);

    }

    public function driver_view_trips($request, $response, $args)
    {

        $driverid = $args['id'];
        $details = array(
            'ct_driver_id' => $driverid,

        );
        $details_data = array();
        $rides = array();
        $trips_data = array();
        $details_data[] = $this->db->table('cab_trip')
        // ->select('*')
            ->where($details)
            ->orderBy('cab_trip.ct_id', 'desc')
        //->limit(1)
            ->get()->toArray();
        //  print_r($details_data);

        foreach ($details_data as $trips) {
            foreach ($trips as $trip) {

// print_r($trip);
                $details = array(
                    'cr_trip_id' => $trip->ct_id,

                );

                $rides = Rides::select('cr_start_name as start', 'cr_stop_name as stop', 'cr_amount as amount', 'cr_payment_staus as payment_status', 'cr_booked_on as booked_on', 'cr_ride_end_time as booked_closed_on', 'cr_no_passengers as seats')
                    ->where($details)
                    ->orderBy('cab_rides.cr_id', 'desc')
                    ->get()->toArray();
                $trips_data[] = array(
                    "from" => $trip->ct_trip_start_from,
                    'trip_id' => $trip->ct_id,
                    'trip_start_time' => $trip->ct_trip_start,
                    'pooling' => $trip->ct_is_pooling,
                    "to" => $trip->ct_trip_start_to,
                    "paid" => $trip->ct_payment_staus,
                    "rides" => $rides,
                );

            }

        }

        if (!empty($trips_data)) {
            $output = array(
                "status" => true,
                "message" => "Trips Lists", //
                 "data" => $trips_data,
            );

        } else {
            $output = array(
                "status" => false,
                "message" => "No trips found", //
            );

        }
        return $this->response->withJson($output);

    }

    public function driver_trip($request, $response, $args)
    {
        $tripid = $args['id'];
        $details = array(
            'cr_trip_id' => $tripid,

        );

        $trip_details = array(
            'ct_id' => $tripid,

        );
        $details_data = array();

        $tripdata = $this->db->table('cab_trip')
            ->where($trip_details)

            ->first();
// print_r($tripdata);

        $trips_data = array();

        $rides = Rides::select('cr_id as ride_id', 'cr_start_name as start', 'cr_stop_name as stop', 'cr_amount as amount', 'cr_payment_staus as payment_status', 'cr_booked_on as booked_on', "cr_cab_ride_status as status")
            ->where($details)
            ->orderBy('cab_rides.cr_id', 'desc')
            ->get()->toArray();
        $trips_data[] = array(
            // "from" => $trip->ct_trip_start_from,
             // "to" => $trip->ct_trip_start_to,
             "rides" => $rides,
        );

        if (!empty($trips_data)) {
            $output = array(
                "status" => true,
                "message" => "Trips Lists", //
                 'trip_id' => $tripdata->ct_id,
                'trip_start_time' => $tripdata->ct_trip_start,
                'pooling' => $tripdata->ct_is_pooling,
                'trip_status' => $tripdata->ct_trip_status,
                "data" => $trips_data,
            );

        } else {
            $output = array(
                "status" => false,
                "message" => "No trips found", //
            );

        }
        return $this->response->withJson($output);

    }

    public function pay()
    {

        $userid = $this->input['userid'];
        $rideid = $this->input['ride_id'];
        $amount = $this->input['amount'];

        $ride_details = $this->db->table('cab_rides')->where('cr_id', $rideid)->first();

        if ($ride_details->cr_amount > $amount) {
            $output = array(
                "status" => false,
                "message" => "Amount failed", //
            );

        } else {
            // $this->db->table('cab_rides')
            //     ->where('cr_id', $rideid)
            //     ->update([
            //         "cr_payment_staus" => 'paid',
            //         "cr_payement_time" => time_now(),

            //     ]);

            $w_balance = HWallet::balance($userid);
            $b = (float)$w_balance->balance;

            $new_wallet_balance = $b - $amount;

            if ($b >= $amount) {
                $this->db->table('wallet')
                    ->where('w_user_id', $userid)
                    ->update([
                        "w_amount" => $new_wallet_balance,
                        "w_last_updated" => time_now(),

                    ]);
                $time = time_now();

                $date = date('Y-m-d', strtotime($time));

                //
                $where_rides = array(
                    'cr_trip_id' => $ride_details->cr_trip_id,
                    'cr_payment_staus' => 'unpaid',
                );
                $ride_details_count = $this->db->table('cab_rides')->where($where_rides)->get()->count();

                if ($ride_details_count <= 0) {
                    $this->db->table('cab_trip')
                        ->where('ct_id', $rideid)
                        ->update([
                            "ct_payment_staus" => 'paid',
                            "cr_payement_time" => time_now(),
                        ]);

                    $this->db->table('moov_wallet')->insert([
                        'mw_user_id' => $userid,
                        'mw_transaction_type' => "ride",
                        'mw_amount' => $amount,
                        'mw_time' => $time,
                        'mw_date' => $date,
                    ]);

                    $this->db->table('transactions')->insert([
                        't_user_id' => $userid,
                        't_reference' => '000000',
                        't_access_code' => '000000',
                        't_amount' => $amount,
                        't_currency' => 'NGN',
                        't_status' => 'completed',
                        't_started' => time_now(),
                        't_date' => time_now(),
                        't_type' => 'ride_pay',
                        't_response' => 'done',
                    ]);

                }

                $output = array(
                    "status" => true,
                    "message" => "paid successfully", //
                );
            } else {
                $output = array(
                    "status" => false,
                    "message" => "Insufficient balance, Please recharge wallet,", //
                );

            }

        }

        return $this->response->withJson($output);

    }

    public function stop_ride($request, $response, $args)
    {
        $rideid = $args['id'];
        $trip = Rides::select('cr_trip_id as trip_id')->where('cr_id', $rideid)->first();
        $userdata = array(
            'cr_trip_id' => $trip['trip_id'],
        );

        $status = $this->db->table('cab_rides')
            ->where('cr_id', $rideid)
            ->update([
                "cr_cab_ride_status" => 'completed',
                'cr_ride_end_time' => time_now(),
            ]);
        $count = Rides::where($userdata)->whereNotIn('cr_cab_ride_status', ['completed', 'cancelled'])->count();
        if ($count <= 0) {
            Trips::where('ct_id', $trip['trip_id'])
                ->update(['ct_trip_status' => 'completed', 'ct_trip_end' => time_now()]);
        } else {
            Trips::where('ct_id', $trip['trip_id'])
                ->update(['ct_trip_status' => 'ontrip']);
        }

        if ($status) {
            $output = array(
                "status" => true,
                "message" => "Ride stopped", //
            );

        } else {
            $output = array(
                "status" => false,
                "message" => "An error occured", //
            );

        }

        return $this->response->withJson($output);

    }

    public function cancel_ride($request, $response, $args)
    {
// 'booked'

        $rideid = $args['id'];

        $status = $this->db->table('cab_rides')
            ->where('cr_id', $rideid)
            ->update([
                "cr_cab_ride_status" => 'cancelled',
                'cr_ride_end_time' => time_now(),
            ]);

        $trip = Rides::select('cr_trip_id as trip_id')->where('cr_id', $rideid)->first();
        $userdata = array(
            'cr_trip_id' => $trip['trip_id'],
        );

        $count = Rides::where($userdata)->whereNotIn('cr_cab_ride_status', ['completed', 'cancelled'])->count();
        if ($count <= 0) {
            Trips::where('ct_id', $trip['trip_id'])
                ->update(['ct_trip_status' => 'completed', 'ct_trip_end' => time_now()]);
        } else {
            Trips::where('ct_id', $trip['trip_id'])
                ->update(['ct_trip_status' => 'ontrip']);
        }

        if ($status) {
            $output = array(
                "status" => true,
                "message" => "Ride cancelled", //
            );

        } else {
            $output = array(
                "status" => false,
                "message" => "An error occured", //
            );

        }

        return $this->response->withJson($output);

    }

    public function driver_details($userid)
    {

        $users = $this->db->table('users')

            ->leftJoin('driver_details', 'driver_details.dd_driver_id', '=', 'users.u_id')

            ->leftJoin('edu_institution', 'edu_institution.ei_id', '=', 'users.u_edu_institution')

            ->leftJoin('wallet', 'wallet.w_user_id', '=', 'users.u_id')

            ->where('users.u_id', '=', $userid)

            ->first();

        $ratings = $this->db->table('driver_ratings')

            ->where('dr_driver_id', $userid)

            ->avg('dr_rating_score');

        $details = array(

            "driver_id" => $users->u_id,

            "first_name" => $users->u_first_name,

            "last_name" => $users->u_last_name,

            "email" => $users->u_email,

            "institution_id" => $users->u_edu_institution,

            "institution_name" => $users->ei_name,

            "phone" => $users->u_phone,

            "phone_country" => $users->u_phone_country,

            "gender" => $users->u_gender,

            "vehicle_no" => $users->dd_car_number,

            "verified" => $users->dd_admin_approved,

            "u_device_id" => $users->u_device_id,

            "car_model" => "abc",

            "car_capacity" => "abc",

            "license_no" => "abc",

            "license_expiry" => "abc",

            "dob" => "abc",

            "ratings" => round($ratings, 2),

            "wallet_balance" => $users->w_amount,

         "image" => $this->env['app_url_live'] . "" . $dir . "" .$users->u_image,

        );

        return $details;

    }

    public function user_view_previous_rides($request, $response, $args)
    {
        $userid = $args['id'];
        $details = array(
            'cr_user_id' => $userid,
        );

        $rides_data = array();
        $rides = Rides::select('*')
            ->where($details)
            ->orderBy('cab_rides.cr_id', 'desc')
            ->get()->toArray();

        foreach ($rides as $ride) {
            $trip_id = $ride['cr_trip_id'];
            $statement = $this->pdo->prepare("SELECT ct_driver_id FROM cab_trip where `ct_id`=$trip_id  LIMIT 1");
            $statement->execute();
            $trips_details_data = $statement->fetch(); //  All($this->pdo::FETCH_ASSOC);

            $time = $ride['cr_booked_on'];

            $date = date('Y-m-d', strtotime($time));

            $ctime = date('H:i:s', strtotime($time));

            $rides_data[] = array(
                'ride_id' => $ride['cr_id'],
                'ride_trip_id' => $ride['cr_trip_id'],
                'ride_driver_id' => $trips_details_data['ct_driver_id'],
                'ride_booked_on' => $ride['cr_booked_on'],
                'ride_booked_on_date' => $date,
                'ride_booked_on_time' => $ctime,
                'ride_amount' => $ride['cr_amount'],
                'ride_status' => $ride['cr_cab_ride_status'],
                'ride_payment_status' => $ride['cr_payment_staus'],
                'ride_payment_time' => $ride['cr_payement_time'],
                'ride_seats' => $ride['cr_no_passengers'],
                'ride_seats' => $ride['cr_no_passengers'],
                'ride_from' => $ride['cr_start_name'],
                'ride_to' => $ride['cr_stop_name'],
                'driver_data' => $driver_details,
            );

        }

        if (!empty($rides_data)) {
            $output = array(
                "status" => true,
                "message" => "Rides Lists", //
                 "count" => count($rides_data),
                "data" => $rides_data,
            );

        } else {
            $output = array(
                "status" => false,
                "count" => 0,
                "message" => "No rides found", //
            );

        }
        return $this->response->withJson($output);

    }

    public function user_view_current_ride($request, $response, $args)
    {
        $userid = $args['id'];

        $details = array(
            'cr_user_id' => $userid,
        );

        $rides_data = array();
        $ride = Rides::select('*')
            ->where($details)
            ->whereNotIn('cr_cab_ride_status', ['completed','cancelled'])
            ->orderBy('cab_rides.cr_id', 'desc')
        // ->limit(1)
            ->first();

        if (!empty($ride)) {
            $trip_id = $ride['cr_trip_id'];

            $statement = $this->pdo->prepare("SELECT ct_driver_id FROM cab_trip where ct_id=$trip_id ");
            $statement->execute();
            $trips_details_data = $statement->fetch(); //  All($this->pdo::FETCH_ASSOC);

            $time = $ride['cr_booked_on'];

            $date = date('Y-m-d', strtotime($time));

            $ctime = date('H:i:s', strtotime($time));

            $rides_data[] = array(
                'ride_id' => $ride['cr_id'],
                'ride_trip_id' => $ride['cr_trip_id'],
                'ride_driver_id' => $trips_details_data['ct_driver_id'],
                'ride_booked_on' => $ride['cr_booked_on'],
                'ride_booked_on_date' => $date,
                'ride_booked_on_time' => $ctime,
                'ride_amount' => $ride['cr_amount'],
                'ride_status' => $ride['cr_cab_ride_status'],
                'ride_payment_status' => $ride['cr_payment_staus'],
                'ride_payment_time' => $ride['cr_payement_time'],
                'ride_seats' => $ride['cr_no_passengers'],
                'ride_seats' => $ride['cr_no_passengers'],
                'ride_from' => $ride['cr_start_name'],
                'ride_to' => $ride['cr_stop_name'],
                "driver_details" => $this->driver_details($trips_details_data['ct_driver_id']),
            );

            if (!empty($rides_data)) {
                $output = array(
                    "status" => true,
                    "message" => "Rides Lists", //
                     "count" => count($rides_data),
                    "data" => $rides_data,
                );

            } else {
                $output = array(
                    "status" => false,
                    "count" => 0,
                    "message" => "No rides found", //
                );

            }
        } else {
            $output = array(
                "status" => false,
                "count" => 0,
                "message" => "No rides found", //
            );

        }
        return $this->response->withJson($output);

    }

     public function rider_view_current_trip($request, $response, $args)
    {
        $userid = $args['id'];

        $details = array(
    'cr_trip_id' => $tripid,

);

$trip_details = array(
    'ct_id' => $tripid,

);
$details_data = array();

$tripdata = $this->db->table('cab_trip')
    ->where($trip_details)

    ->first();
// print_r($tripdata);

$trips_data = array();

$rides = Rides::select('cr_id as ride_id', 'cr_start_name as start', 'cr_stop_name as stop', 'cr_amount as amount', 'cr_payment_staus as payment_status', 'cr_booked_on as booked_on', "cr_cab_ride_status as status")
    ->where($details)
    ->orderBy('cab_rides.cr_id', 'desc')
    ->get()->toArray();
$trips_data[] = array(
    // "from" => $trip->ct_trip_start_from,
     // "to" => $trip->ct_trip_start_to,
     "rides" => $rides,
);

if (!empty($trips_data)) {
    $output = array(
        "status" => true,
        "message" => "Trips Lists", //
         'trip_id' => $tripdata->ct_id,
        'trip_start_time' => $tripdata->ct_trip_start,
        'pooling' => $tripdata->ct_is_pooling,
        'trip_status' => $tripdata->ct_trip_status,
        "data" => $trips_data,
    );

} else {
    $output = array(
        "status" => false,
        "message" => "No trips found", //
    );

}




    }

}
